package com.cafecostes.cafe.DB;

import com.cafecostes.cafe.AES256.AES256Cipher;
import com.cafecostes.cafe.Controller.WebController;
import com.cafecostes.cafe.domain.OrderList;
import com.cafecostes.cafe.email.EmailServiceImpl;
import com.cafecostes.cafe.formatter.Encoder;
import com.cafecostes.cafe.repository.*;
import com.cafecostes.cafe.service.UsersService;
//import com.sun.org.apache.xpath.internal.operations.Mod;
import lombok.extern.java.Log;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.servlet.http.HttpSession;
import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

@Log
@Controller    // This means that this class is a Controller
@RequestMapping(path="/request") // This means URL's start with /demo (after Application path)
public class MainController {

    @Autowired // This means to get the bean called usersRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UsersRepository usersRepository;
    private UsersService usersService;

    @Autowired
    private MenuRepository menuRepository;

    @Autowired
    private OrderListRepository orderListRepository;

    @Autowired
    private CafePostsRepository cafePostsRepository;

    @Autowired
    private ShoppingRepository shoppingRepository;

    @Autowired
    private EmailAuthRepository emailAuthRepository;

    @Autowired
    private SignupEmailAuthRepository signupEmailAuthRepository;

    @Autowired
    JavaMailSender javaMailSender;

    @Autowired
    private WithDrawReasonRepository withDrawReasonRepository;

    @Autowired
    private KakaoPayPaymentRepository kakaoPayPaymentRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (//@RequestParam Long userNum,
                                            @RequestParam String userLoginId,
                                            @RequestParam String userLoginPassword,
                                            @RequestParam String userName,
                                            @RequestParam String userEmail,
                                            @RequestParam String userPhoneNumber,
                                            @RequestParam int coupon,
                                            @RequestParam int age,
                                            @RequestParam String gender,
                                            @RequestParam String datetime
    ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        // localhost:8080/request/add?name=First&email=someemail@someemailprovider.com
        // localhost:8080/request/add?&userLoginId=hellowolrd&userLoginPassword=password&userName=Koo&userEmail=kbi@na.com&userPhoneNumber=01012345678
        Users users = new Users(userLoginId, userLoginPassword, userName, userEmail, userPhoneNumber, coupon, gender, age, datetime);
        Date datetime2 = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
        String createdDate1 = simpleDateFormat.format(datetime2);
        users.setDatetime(createdDate1);
        usersRepository.save(users);
        return "Saved";
    }

    // 회원가입
    @PostMapping("signup")
    public String signup(@RequestParam String userLoginId,
                         @RequestParam String userLoginPassword1,
                         @RequestParam String userName,
                         @RequestParam String userEmail,
                         @RequestParam String userPhoneNumber,
                         @RequestParam int coupon,
                         @RequestParam int age,
                         @RequestParam String gender,
                         @RequestParam String datetime) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        Encoder encoder = new Encoder();
        userName = encoder.encoding(userName);
        gender = encoder.encoding(gender);
        Users users = new Users(userLoginId, userLoginPassword1, userName, userEmail, userPhoneNumber, coupon, gender, age, datetime);
        Date datetime2 = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
        String createdDate1 = simpleDateFormat.format(datetime2);
        users.setDatetime(createdDate1);

        users.setUserLoginId(AES256Cipher.AES_Encode(userLoginId));
        users.setUserLoginPassword(AES256Cipher.AES_Encode(userLoginPassword1));
        usersRepository.save(users);

        Shopping shopping = new Shopping(users.getUserName(), "", "0", "0");
        shoppingRepository.save(shopping);
        return "redirect:/";
    }
    // http://localhost:8080/request/login?&userLoginId=asd&userLoginPassword=asdasdw
    @PostMapping(path="/login")
    public String login(@RequestParam String id,
                                      @RequestParam String pwd,
                                      @RequestParam String redirect_url,
                                      HttpSession httpSession, Model model) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        id = AES256Cipher.AES_Encode(id);
        pwd = AES256Cipher.AES_Encode(pwd);
        // 로그인 성공시
        if (usersRepository.findByUserLoginIdAndUserLoginPassword(id, pwd) != null){
            Users users = usersRepository.findByUserLoginIdAndUserLoginPassword(id, pwd);
            // 유저가 장바구니를 갖고 있다면
            if(shoppingRepository.findByUserName(users.getUserName()) != null){
                Shopping shopping = shoppingRepository.findByUserName(users.getUserName());
                log.info("유저가 장바구니 갖고 있다면 " + shopping.getUserName());


                // model.addAttribute("shopping", shopping);
                httpSession.setAttribute("shopping_name", shopping.getUserName());
                httpSession.setAttribute("shopping_list", shopping.getList());
                httpSession.setAttribute("shopping_num", shopping.getNum());
                httpSession.setAttribute("shopping_sum_cost", shopping.getSum_cost());
            }
            // 갖고 있지 않다면
            else {
                log.info("장바구니 비어있음 디폴트 생성");
                Shopping shopping = new Shopping(users.getUserName(), "", "", "", null);
                shoppingRepository.save(shopping);
                // model.addAttribute("shopping", shopping);
                httpSession.setAttribute("shopping_name", shopping.getUserName());
                httpSession.setAttribute("shopping_list", shopping.getList());
                httpSession.setAttribute("shopping_num", shopping.getNum());
                httpSession.setAttribute("shopping_sum_cost", shopping.getSum_cost());
            }

            httpSession.setAttribute("name", users.getUserName()); // 유저 별명?
            httpSession.setAttribute("userid", users.getUserLoginId()); // 유저 로그인 아이디 유니크값
            httpSession.setAttribute("coupon", users.getCoupon());

            return "redirect:/home";
        }
        // 실패시
        else {
            log.info(redirect_url);
            return "home.jsp?pageName=User/login.jsp?fail=1";
        }

    }

    @PostMapping(path="/updateUserInfoTry")
    public String updateUserInfoTry(){
        return "";
    }


    @RequestMapping(value="/order", method= RequestMethod.POST, produces = "application/json")
    public String order(Model model) {

        return "";
    }

    // 주문 넣기
    // https://localhost:8080/request/order2
    @RequestMapping(value="/order2", method= RequestMethod.POST, produces = "application/json")
    public ResponseEntity<OrderList> order(@RequestBody OrderList _orderList) {
        System.out.print(_orderList.getOrderMesage());
        //OrderList order = new OrderList();
        orderListRepository.save(_orderList);
        return new ResponseEntity<OrderList>(_orderList, HttpStatus.OK);
    }

    // localhost:8080/request/getAllOrderList
//    @RequestMapping(value="/getAllOrderList", method= RequestMethod.GET, produces = "application/json")
//    public @ResponseBody
//    Iterable<OrderList> getAllOrderList() {
//        // This returns a JSON or XML with the users
//        //OrderList orderList = new OrderList();
//        //Menu menu = new Menu(2, "헬로", "하이", 123);
//        //orderListRepository.save(orderList);
//        //menuRepository.findAllById(1);
//        //System.out.println(menuRepository.findAll());
//        return orderListRepository.findAll();
//    }



    // localhost:8080/request/getAllMenu
    @RequestMapping(value="/getAllMenu", method= RequestMethod.GET, produces = "application/json")
    public @ResponseBody
    Iterable<Menu> getAllMenu() {
        // This returns a JSON or XML with the users
        //Menu menu = new Menu(2, "헬로", "하이", 123);
        //menuRepository.save(menu);
        //menuRepository.findAllById(1);
        //System.out.println(menuRepository.findAll());
        return menuRepository.findAll();
    }


//    @PostMapping("/account")
//    public Long saveAccount(@RequestBody UsersSaveRequestDto dto) {
//        return usersService.save(dto);
//    }

    // 게시글 저장
    // https://localhost:8080/request/posts?title=안녕&content=내용&userName=구구까까
    @RequestMapping(value = "/posts",method = {RequestMethod.GET, RequestMethod.POST}, produces = "application/json")
    public String posts(
            @RequestParam String title,
            @RequestParam String content,
            @RequestParam String userName){
        Encoder encoder = new Encoder();
        title = encoder.encoding(title);
        content = encoder.encoding(content);
        userName = encoder.encoding(userName);
        Date datetime2 = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
        String createdDate1 = simpleDateFormat.format(datetime2);

        CafePosts cafePosts = new CafePosts(title, content, userName, createdDate1);
        log.info(cafePosts.getTitle());
        log.info(cafePosts.getContent());
        cafePostsRepository.save(cafePosts);
        return "redirect:/home?pageName=board.jsp";
    }

    // 게시글 삭제하는 소스코드
    @RequestMapping(value = "/removePosts",method = {RequestMethod.GET, RequestMethod.POST}, produces = "application/json")
    public String removePosts(HttpSession httpSession, @RequestParam String id){
        // 게시판 아이디 들어와서 객체 담아주고 세션도 이름 담아줘서 서로 같은지 확인후 지우게 해줘야함
        log.info("삭제로 들어옴");
        log.info(httpSession.getAttribute("name").toString() + cafePostsRepository.findById(Integer.parseInt(id)).getUserName());
        if (cafePostsRepository.findById(Integer.parseInt(id)) != null && cafePostsRepository.findById(Integer.parseInt(id)).getUserName().equals(httpSession.getAttribute("name"))){
            log.info("제목" + cafePostsRepository.findById(Integer.parseInt(id)).getTitle() + "게시글 삭제");
            cafePostsRepository.deleteById(Integer.parseInt(id));
            return "redirect:home?pageName=board.jsp";
        }
        log.info("삭제 못함");
        return "redirect:home?pageName=board.jsp";
    }

    @RequestMapping(value = "/updatePosts", method = {RequestMethod.GET, RequestMethod.POST}, produces = "application/json")
    public String updatePosts(HttpSession httpSession, @RequestParam String id, @RequestParam String title, @RequestParam String content, @RequestParam String userName){
        // 게시판 아이디 들어와서 객체 담아주고 세션도 이름 담아줘서 서로 같은지 확인후 지우게 해줘야함
        log.info("수정으로 들어옴");
        Encoder encoder = new Encoder();
        title = encoder.encoding(title);
        content = encoder.encoding(content);
        userName = encoder.encoding(userName);
        log.info(httpSession.getAttribute("name").toString() + cafePostsRepository.findById(Integer.parseInt(id)).getUserName());
        if (cafePostsRepository.findById(Integer.parseInt(id)) != null && cafePostsRepository.findById(Integer.parseInt(id)).getUserName().equals(httpSession.getAttribute("name"))){
            log.info("제목" + cafePostsRepository.findById(Integer.parseInt(id)).getTitle() + "게시글 수정");
            CafePosts cafePosts = cafePostsRepository.findById(Integer.parseInt(id));
            cafePosts.setTitle(title);
            cafePosts.setContent(content);
            // 유저 이름까지 다시 받아올 필요는 없는듯
            cafePostsRepository.save(cafePosts);
            return "redirect:home?pageName=board.jsp";
        }
        return "redirect:home?pageName=board.jsp";
    }

    // 게시판 추천 버튼 눌렀을 경우 동작
    @RequestMapping(value = "/likesPosts", method = {RequestMethod.GET, RequestMethod.POST}, produces = "application/json")
    public String likesPosts(HttpSession httpSession, Model model, @RequestParam String boardView, String pageName){
        if (httpSession.getAttribute("name") == null){
            log.info("세션값 설정 안되어 있음");
            return "redirect:/home?pageName=board_view.jsp&boardView="+boardView;
        }
        // 값이 잘 들어있다면
        log.info(boardView);
        log.info(cafePostsRepository.findById(Integer.parseInt(boardView)).toString());
        if(cafePostsRepository.findById(Integer.parseInt(boardView)) != null ){
            CafePosts cafePosts = cafePostsRepository.findById(Integer.parseInt(boardView));
            log.info("cafePosts = " + cafePosts);
            // 좋아요를 눌렀던 유저들의 이름을 split 으로 나눠줌

            if (cafePosts.getLikes_users() == null || cafePosts.getLikes_users().equals("")){
                log.info("첫번째 게시물 추천");
                cafePosts.setLikes_users(httpSession.getAttribute("name") + ", ");

                String likes[] = cafePosts.getLikes_users().split(", ");
                log.info("추천 수 : " + likes.length);
                cafePosts.setLikes(likes.length);


                cafePostsRepository.save(cafePosts);
                return "redirect:/home?pageName=board_view.jsp&boardView="+boardView+"&already=2";
            }
            String h[] = cafePosts.getLikes_users().split(", ");
            for (int i = 0; i < h.length; i++){
                // 눌렀던 적이 있는지 검증. 같은게 있다면 이미 눌렀다고 반환 or 그렇지 않다면 좋아요 눌러주기~
                if(h[i].equals(httpSession.getAttribute("name"))){
                    log.info("추천 이미 함");
                    return "redirect:/home?pageName=board_view.jsp&boardView="+boardView+"&already=1";

                }
            }
            // 기존에 추천 상태가 있는 상태
            log.info("게시물 추천");
            cafePosts.setLikes_users(cafePosts.getLikes_users() + httpSession.getAttribute("name") + ", ");
            String likes[] = cafePosts.getLikes_users().split(", ");
            log.info("추천 수 : " + likes.length);
            cafePosts.setLikes(likes.length);

            cafePostsRepository.save(cafePosts);
            return "redirect:/home?pageName=board.jsp&boardView="+boardView+"&already=2";

        }
        return "redirect:/home?pageName=board.jsp";
    }
    // https://cafecostes.com/request/setShopping?userName=구구까까&list=구&num=3&sum_cost=5000&redirect_url=/
    // https://localhost:8080/request/setShopping?userName=구구까까&list=구&num=3&sum_cost=5000&redirect_url=/home?pageName=Introduction/menu.jsp
    //@GetMapping(value="/getShopping", produces = "application/json")
    // 가격을 직접 넣어주면 안될 것 같아... 상품과 커스텀에 대해 들어오면 검증해서 가격을 반영시켜줘야 할듯 싶다.
    // 장바구니 넣어주는 코드 리턴타입 바꾸자
    @RequestMapping(value = "/setShopping",method = {RequestMethod.GET, RequestMethod.POST}, produces = "application/json")
    public /*@ResponseBody
    Shopping*/ String Shopping(
            //@RequestBody Shopping shopping
            @RequestParam String userName, String list, String num, String sum_cost, String redirect_url,
            Model model, HttpSession httpSession){
        log.info("쇼핑카트 넣어버리기");
        log.info(httpSession.getAttribute("name").toString() + " 유저이름");
        Encoder encoder = new Encoder();
        userName = encoder.encoding(userName);
        list = encoder.encoding(list);
        // 장바구니가 이미 생성되어있다면 && 세션이 갖고 있는 이름과 장바구니 소유자의 이름이 같아야지만 값을 넣어줌
        if(shoppingRepository.findByUserName(userName) != null && httpSession.getAttribute("name").toString().equals(userName)){
            // 기존의 장바구니 정보를 받아옴 + 추가되는 주문들 넣어줌
            log.info("완전한 데이터");
            Shopping shopping = shoppingRepository.findByUserName(userName);
            // 저장
            shopping.setList(shopping.getList() + list + ", ");
            shopping.setNum(shopping.getNum() + num);
            shopping.setSum_cost(shopping.getSum_cost() + sum_cost);
            // 다시 저장
            shoppingRepository.save(shopping);

            // 세션 다시 설정
            httpSession.setAttribute("shopping_name", shopping.getUserName());
            httpSession.setAttribute("shopping_list", shopping.getList());
            httpSession.setAttribute("shopping_num", shopping.getNum());
            httpSession.setAttribute("shopping_sum_cost", shopping.getSum_cost());


            model.addAttribute("shopping", shopping);
            WebController webController = new WebController();
            // return "menu.jsp";
            return "redirect:" + redirect_url;

        }

        // 장바구니가 비어있는 상태라면
        else {
            log.info("장바구니 비어있는지 검증");
            // 안비어있음
            if (shoppingRepository.findByUserName(userName) != null){
                log.info("안비어있음");
                Shopping shopping = shoppingRepository.findByUserName(userName);
                shopping.setList(shopping.getList() + list + ", ");
                shopping.setNum(shopping.getNum() + num);
                shopping.setSum_cost(shopping.getSum_cost() + sum_cost);
                shoppingRepository.save(shopping);

                // 세션 다시 설정
                httpSession.setAttribute("shopping_name", shopping.getUserName());
                httpSession.setAttribute("shopping_list", shopping.getList());
                httpSession.setAttribute("shopping_num", shopping.getNum());
                httpSession.setAttribute("shopping_sum_cost", shopping.getSum_cost());

                return "redirect:" + redirect_url;
            }
            log.info("비어있음");
            Shopping shopping = new Shopping(userName, list, num, sum_cost);
            shoppingRepository.save(shopping);
            model.addAttribute("shopping", shopping);
            //return "redirect:" + redirect_url;
            WebController webController = new WebController();
            // return "menu.jsp";
            return "redirect:" + redirect_url;

        }


    }

    // 장바구니 비우기
    @PostMapping("removeShopping")
    public String removeShopping(@RequestParam String userName, String redirect_url, HttpSession httpSession){
        httpSession.removeAttribute("shopping_name");
        httpSession.removeAttribute("shopping_list");
        httpSession.removeAttribute("shopping_num");
        httpSession.removeAttribute("shopping_sum_cost");
        Encoder encoder = new Encoder();
        userName = encoder.encoding(userName);
        log.info("장바구니 비우기");
        log.info(userName);
        // 당연히 값 있어야함
        if (shoppingRepository.findByUserName(userName) != null){
            Shopping shopping = shoppingRepository.findByUserName(userName);
            shopping.setList("");
            shopping.setNum("0");
            shopping.setSum_cost("0");
            shoppingRepository.save(shopping);

            // 세션 다시 설정
            httpSession.setAttribute("shopping_name", shopping.getUserName());
            httpSession.setAttribute("shopping_list", shopping.getList());
            httpSession.setAttribute("shopping_num", shopping.getNum());
            httpSession.setAttribute("shopping_sum_cost", shopping.getSum_cost());

            log.info("장바구니 비우기 성공");
        }
        return "redirect:" + redirect_url;
    }

    @PostMapping("/findID")
    public String findID(@RequestParam String name_box,
                         @RequestParam String email_box, Model model) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        Encoder encoder = new Encoder();
        name_box = encoder.encoding(name_box);
        name_box = AES256Cipher.AES_Encode(name_box);
        if ((usersRepository.findByUserNameAndUserEmail(name_box, email_box) != null)){
//            log.info(usersRepository.findByUserEmail(email_box).toString());
//            log.info(usersRepository.findAll().toString());
            Users users = usersRepository.findByUserNameAndUserEmail(name_box, email_box);
            users.setUserLoginId(AES256Cipher.AES_Decode(name_box));
            log.info(users.getUserLoginId());
            log.info("@@@@@@@@@@@@@@@@@@@@");
            log.info("일치함");

            WebController webController = new WebController();
            model.addAttribute("id", users.getUserLoginId());
            model.addAttribute("name", users.getUserName());
            //return webController.findIDResult(users.getUserLoginId(), users.getUserName(), model);
            return "home.jsp?pageName=find_id_page_result.jsp";
        }
        else {
            log.info("널값");

            return "find_id_page.jsp?result=fail";
        }
    }


    // 유저가 아이디를 입력하고 옴
    @PostMapping("/findPassword")
    public String findPassword(@RequestParam String id_box) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        log.info("비밀번호 찾기 다음 클릭");

        id_box = AES256Cipher.AES_Encode(id_box);
        // 유저가 있을경우
        if(usersRepository.findByUserLoginId(id_box) != null ){
            log.info("아이디 있음");
            log.info("이름이랑 아이디 입력하라고 해야함");
            // PostMapping 해줘도 되지만 유저 리포지토리에 있어야만 반환할 수 있도록 함으로써 보안 향상!
//            return "find_password_page_middle.jsp";
            return "home.jsp?pageName=find_password_page_middle.jsp";
        }
        // 해당 아이디에 맞는 계정이 없을경우
        else {
            log.info("아이디 없음 비밀번호 찾기 페이지로 다시 이동");
//            return "redirect:/findPassword";
            return "home.jsp?pageName=find_password_page.jsp?fail=1";
        }
    }


    // 입력하고 왔더니 이름과 이메일을 입력하라함
    @PostMapping("/findPasswordEmail")
    public String findPasswordEmail(@RequestParam String name, @RequestParam String email){
        Users users;
        // 유저가 있을경우에
        Encoder encoder = new Encoder();
        name = encoder.encoding(name);
        log.info(name + " 과 " + email);
        if (usersRepository.findByUserNameAndUserEmail(name, email) != null){
            // 랜덤한 8자리 코드 발송
            String uuid = UUID.randomUUID().toString();
            uuid = uuid.substring(0,8);
            // users 에 현재 유저 담아주기
            users = usersRepository.findByUserNameAndUserEmail(name, email);

            // 날짜 생성
            Date date = new Date();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
            String createdDate1 = simpleDateFormat.format(date);
            String untilDate1 = simpleDateFormat.format(date);
            long createdDate = Long.parseLong(createdDate1);
            long untilDate = Long.parseLong(untilDate1) + 60 * 5; // 5분안에 해야함


            // 이메일 객체 담기
            EmailAuth emailAuth = new EmailAuth(users, true, uuid, createdDate, untilDate);
            emailAuthRepository.save(emailAuth);
            EmailServiceImpl es = new EmailServiceImpl();
            es.setJavaMailSender(javaMailSender);
            log.info("---이메일 전송함---");
            log.info("이메일: "+ users.getUserEmail() + " 유저이름: " + users.getUserName() + " 인증코드: " + uuid);
            es.sendSimpleMessage(users.getUserEmail(),users.getUserName() + "님 이메일 인증 코드입니다.", "아래의 코드 8자리를" +
                    "붙여넣어주세요.\n" +
                    uuid + "\n" +
                    "문의사항이 있으시면 kbi960130@bible.ac.kr로 문의주세요");
            // uuid 를 이메일 인증 페이지로 넘겨준다.
            return "home.jsp?pageName=find_password_page_send_email.jsp";
            // 유저 넣어줘야함 파라미터로
        }
        // 없을경우에
        else {
            log.info("없을경우에");
            return "home.jsp?pageName=find_password_page_middle.jsp?fail=1";
        }

    }

    // 회원가입시 이메일 인증
    @PostMapping("emailAuth")
    public String emailAuth(@RequestParam String email){
        // 랜덤한 8자리 코드 발송
        String uuid = UUID.randomUUID().toString();
        uuid = uuid.substring(0,8);

        // 날짜 생성
        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        String createdDate1 = simpleDateFormat.format(date);
        String untilDate1 = simpleDateFormat.format(date);
        long createdDate = Long.parseLong(createdDate1);
        long untilDate = Long.parseLong(untilDate1) + 60 * 5; // 5분안에 해야함

        // 이메일 객체 담기
        SignupEmailAuth signupEmailAuth = new SignupEmailAuth(true, uuid, createdDate, untilDate);
        signupEmailAuthRepository.save(signupEmailAuth);
        EmailServiceImpl es = new EmailServiceImpl();
        es.setJavaMailSender(javaMailSender);
        log.info("---이메일 전송함---");
        log.info("이메일: " + email + " 인증코드: " + uuid);
        es.sendSimpleMessage(email,"카페코스테스 회원가입 인증 코드입니다.", "아래의 코드 8자리를" +
                "붙여넣어주세요.\n" +
                uuid + "\n" +
                "문의사항이 있으시면 kbi960130@bible.ac.kr로 문의주세요");
        // uuid 를 이메일 인증 페이지로 넘겨준다.
        return "emailcheck_result.jsp";
    }

    // 회원가입시 이메일 인증코드 입력하는곳
    @PostMapping("/signupEmailAuth")
    public String signupEmailAuth(@RequestParam String auth_code){
        // 유효하다면
        if(signupEmailAuthRepository.findByCode(auth_code) != null){
            SignupEmailAuth signupEmailAuth = signupEmailAuthRepository.findByCode(auth_code);
            signupEmailAuth.setStatus(false);
            return "emailcheck_result_success.jsp";
        }
        else {
            return "emailcheck_result.jsp?code=1";
        }


    }

    @PostMapping("/findPasswordEmailAuth")
    public String findPasswordEmailAuth(@RequestParam String auth_code){
        EmailAuth emailAuth = emailAuthRepository.findByCode(auth_code);
        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        String createdDate1 = simpleDateFormat.format(date);
        long createdDate = Long.parseLong(createdDate1); // 지금시간

        // 코드에 맞는 것이 있을경우 진입 + // DB에 있는 유효시간도 구현해서 적용해줘야함
        // 1. 일치하는 코드 번호가 없습니다.
        // 2. 인증 유효 시간이 지남.
        // 3. 사용이 불가한 코드 입니다.
        if(emailAuthRepository.findByCode(auth_code) != null && emailAuth.isStatus() && emailAuth.getCode().equals(auth_code) && createdDate <= emailAuth.getUntilDate()){
            log.info("요청한시간" + createdDate1);
            log.info("디비의시간" + emailAuth.getUntilDate());
            // 더이상 못쓰도록 비활성화
            emailAuth.setStatus(false);
            // 그리고 저장
            emailAuthRepository.save(emailAuth);

            int user_num = emailAuthRepository.findByCode(auth_code).getUsers().getUserNum();
            // 보안 안좋은듯 바꿔야함 user_num 만 파라미터로 넘겨버리면 비번 바꾸는거 개쉬움
            // -> 안좋나? post로 URL에 코드를 보내도 이메일 인증 DB에 해당 코드가 있어야하지만 false로 되어있으면 접근조차안됨
            return "home.jsp?pageName=find_password_page_update_password.jsp?user_num="+user_num;
        }
        // 실패일경우
        // code 1 코드 틀림 -> 다시 입력할 여지를 줘야함
        // code 2 코드 이미 사용함 -> 비번찾는 첫페이지로
        // code 3 시간 초과 -> 비번찾는 첫페이지로
        else {
            //false 인 경우 이미 썼다거나?
            if(emailAuthRepository.findByCode(auth_code) == null){
                return "home.jsp?pageName=find_password_page_send_email.jsp?code=1";
            }
            else if(!emailAuth.isStatus()){
                return "home.jsp?pageName=find_password_page.jsp?code=2";
            }
            else if(createdDate >= emailAuth.getUntilDate()){
                return "home.jsp?pageName=find_password_page.jsp?code=3";
            }
            else {
                return "home.jsp?pageName=find_password_page_send_email.jsp?code=1";
            }
        }
    }

    // 유저가 새 비밀번호를 입력후 보냄 그거를 갱신해주는 코드
    @PostMapping("/findPasswordUpdate")
    public String findPasswordUpdate(@RequestParam String password2,
                                     @RequestParam int user_num) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        Users users = usersRepository.findByUserNum(user_num);
        users.setUserLoginPassword(AES256Cipher.AES_Encode(password2));
        usersRepository.save(users);
        return "password_change_success.jsp"; // 추가로 파라미터 붙여주자 jsp 말고 webController에서 불러오는것도 생각하자
    }

    // 유저인지 한번 더 확인
    @PostMapping(path="/reallyYou")
    public String reallyYou(@RequestParam String id,
                            @RequestParam String pwd,
                            @RequestParam String redirect_url, Model model) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        id = AES256Cipher.AES_Encode(id);
        pwd = AES256Cipher.AES_Encode(pwd);
        if (usersRepository.findByUserLoginIdAndUserLoginPassword(id, pwd) != null){
            Users users = usersRepository.findByUserLoginIdAndUserLoginPassword(id, pwd);
            //return "redirect:" + "/updateUserInfo";
            log.info("갈림길 리다렉 URL = " + redirect_url);
            // checkUser 에서 탈퇴로 연결되는경우
             if (redirect_url.equals("/withDraw")){
                 log.info("탈퇴로 들어옴");
                 model.addAttribute("num", users.getUserNum());
                 return this.withDraw(users, model);
             }
             // checkUser 에서 회원정보수정으로 연결되는경우
            else {
                 log.info("정보수정으로 들어옴");
                 model.addAttribute("num", users.getUserNum());
                 return this.updateUserInfo(users, model);
                 //return "redirect:/home?pageName=update_user_information.jsp&redirect_url=" + redirect_url;
             }

        }
        else {
            return "redirect:" + redirect_url;
        }
    }


    // 수정화면에서 수정한 값들을 갱신해줄 예정
    @PostMapping("/updateUserInfo")
    public String updateUserInfo(Users users, Model model){
        log.info(model.addAttribute("info", users).toString());
        log.info(users.getUserName());
        //return "update_user_information.jsp";
        //return "redirect:/home?pageName=update_user_information.jsp";
        return "home.jsp?pageName=update_user_information.jsp";
    }

    @PostMapping("/updateUserInfoSuccess")
    public String updateUserInfoSuccess(){
        return "";
    }

    @PostMapping("/updateUserInfoName")
    public String updateUserInfoName(@RequestParam String num,
                                     @RequestParam String name, Model model){
        Encoder encoder = new Encoder();
        name = encoder.encoding(name);
        if (usersRepository.findByUserNum(Integer.parseInt(num)) != null){
            Users users = usersRepository.findByUserNum(Integer.parseInt(num));
            users.setUserName(name);
            usersRepository.save(users);
            model.addAttribute("info", users);
            model.addAttribute("real", true);
//            return "redirect:/updateUserInfo?success=yes";
            return this.updateUserInfo(users, model);

        }
        else {
            return "redircet:/";
        }
    }

    @PostMapping("/updateUserInfoPhone")
    public String updateUserInfoPhone(@RequestParam String num,
                                      @RequestParam String phone, Model model){
        if (usersRepository.findByUserNum(Integer.parseInt(num)) != null){
            Users users = usersRepository.findByUserNum(Integer.parseInt(num));
            users.setUserPhoneNumber(phone);
            usersRepository.save(users);
            model.addAttribute("info", users);
            model.addAttribute("real", true);
            return this.updateUserInfo(users, model);

        }
        else {
            return "redircet:/";
        }

    }

    @PostMapping("/updateUserInfoEmail")
    public String updateUserInfoEmail(@RequestParam String num,
                                              @RequestParam String email, Model model){
        if (usersRepository.findByUserNum(Integer.parseInt(num)) != null){
            Users users = usersRepository.findByUserNum(Integer.parseInt(num));
            users.setUserEmail(email);
            usersRepository.save(users);
            model.addAttribute("info", users);
            model.addAttribute("real", true);
            return this.updateUserInfo(users, model);
        }
        else {
            return "redircet:/";
        }
    }

    @PostMapping("/updateUserInfoLoginPassword")
    public String updateUserInfoLoginPassword(@RequestParam String num,
                                              @RequestParam String password1, Model model) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        if (usersRepository.findByUserNum(Integer.parseInt(num)) != null){
            Users users = usersRepository.findByUserNum(Integer.parseInt(num));
            users.setUserLoginPassword(AES256Cipher.AES_Encode(password1));
            usersRepository.save(users);
            model.addAttribute("info", users);
            model.addAttribute("real", true);
            return this.updateUserInfo(users, model);
        }
        else {
            return "redircet:/";
        }
    }

    // 회원탈퇴 페이지
    @PostMapping("/withDraw")
    public String withDraw(Users users, Model model) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        users.setUserLoginId(AES256Cipher.AES_Decode(users.getUserLoginId()));
        users.setUserLoginPassword(AES256Cipher.AES_Decode(users.getUserLoginPassword()));
        model.addAttribute("info", users);
        return "home.jsp?pageName=withDraw.jsp";
    }

    // 탈퇴하기 버튼 누르면 진행되는 곳
    @PostMapping("/reallyWithDraw")
    public String reallyWithDraw(@RequestParam String reason[],
                                 @RequestParam String redirect_url,
                                 @RequestParam String userLoginId,
                                 @RequestParam String userLoginPassword,
                                 HttpSession httpSession) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        userLoginId = AES256Cipher.AES_Encode(userLoginId);
        userLoginPassword = AES256Cipher.AES_Encode(userLoginPassword);
        log.info(userLoginId + " " + userLoginPassword);
        // 유저가 로그인이 정상적으로 되어있고 탈퇴를 진행할 경우
        if (usersRepository.findByUserLoginIdAndUserLoginPassword(userLoginId, userLoginPassword) != null){
            httpSession.removeAttribute("name");
            httpSession.removeAttribute("coupon");
            // 유저 담아주고 정보 삭제 진행
            Users users = usersRepository.findByUserLoginIdAndUserLoginPassword(userLoginId, userLoginPassword);
            usersRepository.deleteById(users.getUserNum());
            Encoder encoder = new Encoder();
            String why = "";
            for(int i = 0; i < reason.length; i++){
                reason[i] = encoder.encoding(reason[i]);
                why += reason[i] + "|";
                log.info(reason[i]);
            }
            log.info(why);
            // 탈퇴 이유 저장
            WithDrawReason withDrawReason = new WithDrawReason(why, users.getGender(), users.getAge());
            withDrawReasonRepository.save(withDrawReason);
            // redirect_url == withDrawSuccess
            return "redirect:" + redirect_url;
        }
        // 탈퇴가 잘 진행되지 않을경우
        else {
            return "redirect:" + redirect_url + "?real=false";
        }

    }
    // 로그인 아이디 체크하는 부분
    @RequestMapping(value = "idcheck", method = {RequestMethod.GET, RequestMethod.POST})
    public String idcheck(@RequestParam String id) throws NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        id = AES256Cipher.AES_Encode(id);
        log.info(id);
        // 있으므로 사용불가
        if (usersRepository.findByUserLoginId(id) != null){
            return "idcheck.jsp?id=fail";
        }
        // 없으므로 사용가능
        else {
            return "idcheck.jsp?id=success";
        }
    }

    // 유저 별명 체크하는 부분
    @RequestMapping(value = "namecheck", method = {RequestMethod.GET, RequestMethod.POST})
    public String namecheck(@RequestParam String name){
//        Encoder encoder = new Encoder();
//        name = encoder.encoding(name);
        log.info(name);
        // 있으므로 사용불가
        if (usersRepository.findByUserName(name) != null){
            return "namecheck.jsp?id=fail";
        }
        // 없으므로 사용가능
        else {
            return "namecheck.jsp?id=success";
        }
    }



    // admin 계정 관리 부분
    @RequestMapping(value = "kakaoPayView", method = {RequestMethod.GET, RequestMethod.POST})
    public String kakaoPayView(HttpSession httpSession, Model model){
        // 세션의 이름 가져와서 현재 이용중인 세션이 관리자 세션인지 판단하여 알맞은 리턴을 해줄 것.
        log.info("현재 세션의 이름 : " + httpSession.getAttribute("name").toString());
        if(httpSession.getAttribute("name").equals("koo")){
            log.info("관리자 세션으로 잘 들어옴");
            Iterable<KakaoPayPayment> h = kakaoPayPaymentRepository.findAllDesc();

            log.info("길이");
            model.addAttribute("kakao", h);
            log.info(h.toString());
            return "home.jsp?pageName=admin/kakaoPayView.jsp";
        }
        return null;
    }

    @GetMapping("/home")
    public String home(@RequestParam (required = false) String pageName){
        log.info("home 진입");
        log.info(pageName);
        if(pageName != null){
            if (!pageName.equals("")){
                return "redirect:/home?pageName="+pageName;
            }
        }

        return "redirect:/home";
    }
}